##定义初始变量
#set($tableName = $tool.append($tableInfo.name, "ServiceImpl"))
##设置回调
$!callback.setFileName($tool.append($tableName, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/service/impl"))

##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end
##定义服务名
#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))

#set($beanName = $!tool.firstLowerCase($!tableInfo.name))


#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;

import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};
import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;


import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.weekend.WeekendSqls;
import lombok.extern.slf4j.Slf4j;
import javax.annotation.Resource;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
  * @author mc
  * Create date $!time.currTime()
  * Version 1.0
  * Description $!{tableInfo.comment}($!{tableInfo.name})表服务实现类
  */
@Slf4j
@Service
public class $!{tableName} implements $!{serviceName} {

    @Resource
    private $!{tableInfo.name}Mapper $!{beanName}Mapper;

    @Override
    public $!{tableInfo.name} insert($!{tableInfo.name} $!{beanName}) {
        $!{beanName}Mapper.insert($!{beanName});
        return $!{beanName};
    }

    @Override
    public void update($!{tableInfo.name} $!{beanName}) {
        $!{beanName}Mapper.updateByPrimaryKeySelective($!{beanName});
    }

    @Override
    public void deleteById($!pk.shortType $!pk.name){
        Optional<$!{tableInfo.name}> byId = this.findById($!pk.name);
        if (!byId.isPresent()) {
            throw new CustomException(ResultCode.ERROR.getCode(), ResultCode.RESULT_DATA_NONE.getMsg());
        }
        $!{tableInfo.name} $!{beanName} = byId.get();
        $!{beanName}.setIsDelete(1);
        $!{beanName}.setUpdateTime(LocalDateTime.now());
        this.update($!{beanName});
    }


    @Override
    public Optional<$!{tableInfo.name}> findById($!pk.shortType $!pk.name) {
        return Optional.ofNullable($!{beanName}Mapper.selectByPrimaryKey($!pk.name);

    }

    @Override
    public Result pageQuery(Integer page, Integer size, String sort, $!{tableInfo.name}VO $!{beanName}VO) {
        page = null  == page ? 1 : page;
        size = null  == size ? 10 : size;
        if (size > 101){
            return fail("num must not be greater than 100");
        }
        if (sort != null && !"".equals(sort.trim())){
			PageHelper.startPage(page, size,sort);
		}else {
			PageHelper.startPage(page, size);
		}
        Example.Builder builder = new Example.Builder($!{tableInfo.name}.class);
        builder.where(WeekendSqls.<$!{tableInfo.name}>custom().andEqualTo($!{tableInfo.name}::getIsDelete, 0));
        if($!tool.firstLowerCase($!{tableInfo.name})VO != null){
        }
        Page<$!{tableInfo.name}> all = (Page<$!{tableInfo.name}>) $!{beanName}Mapper.selectByExample(builder.build());
        return ok(all.getTotal(),all.getResult());
    }

    @Override
    public $!{tableInfo.name} insertVO($!{tableInfo.name}VO vo) {
        return null;
    }

    @Override
    public $!{tableInfo.name} updateVO($!{tableInfo.name}VO vo) {
        return null;
    }


}